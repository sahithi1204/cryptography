def gcd(a, b):
    """Calculate the Greatest Common Divisor of a and b."""
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    """Find the modular inverse of a under modulo m."""
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def affine_encrypt(text, a, b):
    """Encrypt the text using the affine cipher."""
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 must be coprime.")
    
    encrypted_text = ''
    for char in text:
        if char.isalpha():
            if char.islower():
                p = ord(char) - ord('a')
                c = (a * p + b) % 26
                encrypted_text += chr(c + ord('a'))
            else:
                p = ord(char) - ord('A')
                c = (a * p + b) % 26
                encrypted_text += chr(c + ord('A'))
        else:
            encrypted_text += char  # Non-alphabetic characters are not encrypted
    return encrypted_text

def affine_decrypt(text, a, b):
    """Decrypt the text using the affine cipher."""
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 must be coprime.")
    
    decrypted_text = ''
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        raise ValueError("No modular inverse exists for a and 26.")
    
    for char in text:
        if char.isalpha():
            if char.islower():
                c = ord(char) - ord('a')
                p = (a_inv * (c - b)) % 26
                decrypted_text += chr(p + ord('a'))
            else:
                c = ord(char) - ord('A')
                p = (a_inv * (c - b)) % 26
                decrypted_text += chr(p + ord('A'))
        else:
            decrypted_text += char  # Non-alphabetic characters are not decrypted
    return decrypted_text

# Example usage
a = 5
b = 8
plaintext = "AffineCipher"
print(f"Plaintext: {plaintext}")

ciphertext = affine_encrypt(plaintext, a, b)
print(f"Ciphertext: {ciphertext}")

decrypted_text = affine_decrypt(ciphertext, a, b)
print(f"Decrypted Text: {decrypted_text}")
