import collections
import string

# English letter frequencies from most common to least common
english_freq_order = "etaoinshrdlcumwfgypbvkjxqz"

def calculate_frequencies(text):
    """Calculate the frequency of each letter in the given text."""
    text = text.lower()
    counter = collections.Counter(text)
    total_letters = sum(counter.values())
    frequencies = {char: count / total_letters for char, count in counter.items()}
    return frequencies

def score_text(text):
    """Score the text based on the frequency of English letters."""
    frequencies = calculate_frequencies(text)
    score = sum(frequencies.get(char, 0) * english_freq_order.index(char) for char in frequencies)
    return score

def generate_substitution(ciphertext):
    """Generate possible substitutions based on letter frequencies."""
    cipher_freq_order = [char for char, _ in sorted(calculate_frequencies(ciphertext).items(), key=lambda item: item[1], reverse=True)]
    substitution = dict(zip(cipher_freq_order, english_freq_order))
    return substitution

def apply_substitution(ciphertext, substitution):
    """Substitute letters in the ciphertext using the substitution dictionary."""
    plaintext = []
    for char in ciphertext:
        if char.isalpha():
            is_upper = char.isupper()
            char = char.lower()
            substituted_char = substitution.get(char, char)
            if is_upper:
                substituted_char = substituted_char.upper()
            plaintext.append(substituted_char)
        else:
            plaintext.append(char)
    return ''.join(plaintext)

def perform_frequency_attack(ciphertext, top_n=10):
    """Perform a frequency attack on the ciphertext and return the top N possible plaintexts."""
    substitution = generate_substitution(ciphertext)
    possible_plaintexts = []
    
    for i in range(26):
        shifted_substitution = {k: v for k, v in substitution.items()}
        shifted_substitution = {k: string.ascii_lowercase[(string.ascii_lowercase.index(v) + i) % 26] for k, v in shifted_substitution.items()}
        
        plaintext = apply_substitution(ciphertext, shifted_substitution)
        score = score_text(plaintext)
        possible_plaintexts.append((plaintext, score))
    
    # Sort by score (higher is better)
    possible_plaintexts.sort(key=lambda x: x[1], reverse=True)
    
    return possible_plaintexts[:top_n]

# Example usage
ciphertext = "Wkh txlfn eurzqv rxj ohdylqj vhduhv wr wkh vwdwh ri dplv"
top_n = 10
possible_plaintexts = perform_frequency_attack(ciphertext, top_n)

print(f"Ciphertext: {ciphertext}")
print("\nTop possible plaintexts:")
for i, (plaintext, score) in enumerate(possible_plaintexts, 1):
    print(f"{i}: {plaintext} (Score: {score:.2f})")
