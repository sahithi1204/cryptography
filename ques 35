import random
import string

def generate_key(length):
    """Generate a random key of the given length."""
    return [random.randint(0, 25) for _ in range(length)]

def encrypt_vigenere_one_time_pad(plaintext, key):
    """Encrypt the plaintext using the one-time pad version of the Vigenère cipher."""
    ciphertext = []
    for i, char in enumerate(plaintext):
        if char.isalpha():  # Only encrypt alphabetic characters
            shift = key[i % len(key)]
            if char.islower():
                encrypted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))
            else:
                encrypted_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))
            ciphertext.append(encrypted_char)
        else:
            ciphertext.append(char)  # Non-alphabetic characters are not encrypted
    return ''.join(ciphertext)

def decrypt_vigenere_one_time_pad(ciphertext, key):
    """Decrypt the ciphertext using the one-time pad version of the Vigenère cipher."""
    plaintext = []
    for i, char in enumerate(ciphertext):
        if char.isalpha():  # Only decrypt alphabetic characters
            shift = key[i % len(key)]
            if char.islower():
                decrypted_char = chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a'))
            else:
                decrypted_char = chr((ord(char) - ord('A') - shift + 26) % 26 + ord('A'))
            plaintext.append(decrypted_char)
        else:
            plaintext.append(char)  # Non-alphabetic characters are not decrypted
    return ''.join(plaintext)

# Example usage
if __name__ == "__main__":
    plaintext = "This is a test message."
    key = generate_key(len(plaintext))
    print(f"Key: {key}")

    ciphertext = encrypt_vigenere_one_time_pad(plaintext, key)
    print(f"Ciphertext: {ciphertext}")

    decrypted_message = decrypt_vigenere_one_time_pad(ciphertext, key)
    print(f"Decrypted Message: {decrypted_message}")
